use crate::ast::{
  Expression, ExpressionType, Literal, Operation, PatternType, Pattern, Arm, Function, Enum,
  TopLevel, Program, Src, Spanned,
};

grammar;

match {
  r"\s*" => {},
  r"[0-9]+",
  r"[a-zA-Z_]+",
  r"\(\* ((\*[^)])|[^*])*\*\)" => {},
  _
}

Comma<T>: Vec<T> = {
  <mut v:(<T> ",")*> <e:T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
};

pub Program: Program = <declarations:(<TopLevel>)+> => Program::new(declarations);

pub TopLevel: TopLevel = {
  <Enum> => TopLevel::Enum(<>),
  <Function> => TopLevel::Function(<>),
};

Enum: Enum = "enum" <name:Ident> ":=" <variants:Comma<VariantStr>> =>
  Enum {
    name: String::from(name),
    parameters: Vec::new(),
    variants: variants.into_iter().map(String::from).collect(),
  };

Function: Function = "let" <rec:"rec"?> <name:Ident> <parameters:Ident*> ":=" <body:Expression> =>
  Function {
    name: String::from(name),
    rec: rec.is_some(),
    parameters: parameters.into_iter().map(String::from).collect(),
    body,
  };

Spanned<T>: Spanned<T> = <s:@L> <data:T> <e:@R> => Spanned::new(data, Src::new(s, e));

Pattern: Pattern = <Spanned<Pattern0>>;

Pattern0: PatternType = {
  <literal:Literal> => PatternType::Literal { literal },
  <variant:VariantStr> => PatternType::Variant { variant: String::from(variant) },
  <name:Ident> => PatternType::Variable { name: String::from(name) },
  "(" <binds:Comma<Ident>> ")" =>
    PatternType::Tuple { binds: binds.into_iter().map(String::from).collect() },
}

Expression: Expression = {
  <Infix>,
  <Spanned<Fun>>,
  <Spanned<Let>>,
  <Spanned<If>>,
  <Spanned<Match>>,
};

#[inline]
Fun: ExpressionType = "fun" <variable:Ident> "->" <body:Expression> =>
  ExpressionType::Fun { variable: String::from(variable), body: Box::new(body) };

#[inline]
Let: ExpressionType = "let" <bind:Ident> "=" <value:Expression> "in" <next:Expression> =>
  ExpressionType::Let { bind: String::from(bind), value: Box::new(value), next: Box::new(next) };

Arm: Arm = <left:Pattern> "=>" <right:Expression> => Arm { left, right };
#[inline]
Match: ExpressionType = "match" <scrutinee:Expression> "with" <arms:("|" <Arm>)+> "end" =>
  ExpressionType::Match { scrutinee: Box::new(scrutinee), arms };

#[inline]
If: ExpressionType = "if" <condition:Expression> "then" <then:Expression> "else" <otherwise:Expression> =>
  ExpressionType::If { condition: Box::new(condition), then: Box::new(then), otherwise: Box::new(otherwise) };

Infix: Expression = {
  #[precedence(level="0")]
  <Application>,

  #[precedence(level="1")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "*" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Mul, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="1")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "/" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Div, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="2")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "-" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Sub, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="2")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "+" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Add, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="3")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> ">" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Gt, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="3")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> ">=" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Gte, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="4")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "<" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Lt, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="4")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "<=" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Lte, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="5")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "=" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Eq, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="5")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "<>" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Neq, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),

  #[precedence(level="6")] #[assoc(side="left")]
  <s:@L> <lhs:Infix> "++" <rhs:Infix> <e:@R> =>
    Spanned::new(
      ExpressionType::BinaryOp { op: Operation::Concat, lhs: Box::new(lhs), rhs: Box::new(rhs) },
      Src::new(s, e),
    ),
}

Application: Expression = {
  <SubExpression>,
  <Spanned<Application0>>,
}

#[inline]
Application0: ExpressionType = {
  <function:Application> <argument:SubExpression> =>
    ExpressionType::Application { function: Box::new(function), argument: Box::new(argument) },
};

pub SubExpression: Expression = {
  <Primary>,
  "begin" <Expression> "end",
  "(" <Expression> ")",
  <Spanned<Tup>>,
};

Tup: ExpressionType =
  "(" <mut elements:(<Expression> ",")+> <last:Expression?> ")" => match last {
    Some(last) => {
      elements.push(last);
      ExpressionType::Tuple { elements }
    },
    None => ExpressionType::Tuple { elements },
  };

pub Primary: Expression = {
  <Spanned<UnitLiteral>>,
  <Spanned<Variant>>,
  <Spanned<Hole>>,
  <Spanned<Variable>>,
  <Spanned<LiteralExpr>>,
};

#[inline]
LiteralExpr: ExpressionType = <literal:Literal> => ExpressionType::Literal { literal };
#[inline]
UnitLiteral: ExpressionType = "(" ")" => ExpressionType::Unit;

#[inline]
Literal: Literal = {
  "true" => Literal::Boolean { value: true },
  "false" => Literal::Boolean { value: false },
  <StringLiteral> => Literal::String { value: <> },
  <r"[0-9]+"> => Literal::Number { value: <>.parse::<i32>().unwrap() },
};

pub Variant: ExpressionType = <VariantStr> =>
  ExpressionType::Variant { variant: String::from(<>) };
pub Hole: ExpressionType = "?" <Ident> =>
  ExpressionType::Hole { name: String::from(<>) };
pub Variable: ExpressionType = <Ident> =>
  ExpressionType::Variable { name: String::from(<>) };

StringLiteral: String = r#""([^"\\]|\\.)*""# => String::from(<>.trim_matches('"'));

pub VariantStr: &'input str = "." <s:r"[a-zA-Z_]+"> => s;
pub Ident: &'input str = <s:r"[a-zA-Z_]+"> => s;
